// =============================================================================
// VARIABLES
// =============================================================================
$primary-color: #EA6300;
$secondary-color: #13123D;
$border-color: #ff7101;

// =============================================================================
// RESPONSIVE BREAKPOINTS
// =============================================================================
$breakpoints: (
  xs: 320px,
  xs-max: 470px,
  sm: 471px,
  sm-max: 575px,
  md: 576px,
  md-max: 767px,
  lg: 768px,
  lg-max: 991px,
  xl: 992px,
  xl-max: 1199px,
  xxl: 1200px,
  xxl-max: 1399px,
  xxxl: 1400px
);

// =============================================================================
// SPACING SCALES (manteniendo valores críticos exactos)
// =============================================================================
$spacing-scale: (
  xs: (margin: 0.5rem, padding: 0.25rem, gap: 0.5rem, font: 0.75rem),
  sm: (margin: 0.625rem, padding: 0.8rem, gap: 0.625rem, font: 0.9rem),
  md: (margin: 0.75rem, padding: 1rem, gap: 0.75rem, font: 1rem),
  lg: (margin: 1rem, padding: 1.25rem, gap: 1rem, font: 1.125rem),
  xl: (margin: 1.25rem, padding: 1.5rem, gap: 1.25rem, font: 1.25rem),
  xxl: (margin: 1.75rem, padding: 2rem, gap: 1.5rem, font: 1.5rem),
  xxxl: (margin: 2rem, padding: 2.5rem, gap: 1.5rem, font: 1.75rem)
);

// =============================================================================
// MIXINS
// =============================================================================

// Media Query Mixin
@mixin respond-to($breakpoint-min, $breakpoint-max: null) {
  @if $breakpoint-max {
    @media only screen and (min-width: $breakpoint-min) and (max-width: $breakpoint-max) {
      @content;
    }
  } @else {
    @media only screen and (min-width: $breakpoint-min) {
      @content;
    }
  }
}

// Responsive Typography Mixin
@mixin responsive-typography($base-size, $scale-factor: 0.8) {
  font-size: $base-size;
  
  @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
    font-size: $base-size * $scale-factor * 0.6; // Manteniendo proporción crítica para 320px
  }
  
  @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, sm-max)) {
    font-size: $base-size * $scale-factor * 0.75;
  }
  
  @include respond-to(map-get($breakpoints, md), map-get($breakpoints, md-max)) {
    font-size: $base-size * $scale-factor * 0.9;
  }
  
  @include respond-to(map-get($breakpoints, lg), map-get($breakpoints, lg-max)) {
    font-size: $base-size * $scale-factor;
  }
  
  @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
    font-size: $base-size * 1.2;
  }
  
  @include respond-to(map-get($breakpoints, xxxl)) {
    font-size: $base-size * 1.4;
  }
}

// Responsive Spacing Mixin
@mixin responsive-spacing($property, $base-value, $scale-factor: 1) {
  #{$property}: $base-value;
  
  @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
    #{$property}: $base-value * 0.5 * $scale-factor;
  }
  
  @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, sm-max)) {
    #{$property}: $base-value * 0.75 * $scale-factor;
  }
  
  @include respond-to(map-get($breakpoints, md), map-get($breakpoints, md-max)) {
    #{$property}: $base-value * 0.9 * $scale-factor;
  }
  
  @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
    #{$property}: $base-value * 1.25 * $scale-factor;
  }
  
  @include respond-to(map-get($breakpoints, xxxl)) {
    #{$property}: $base-value * 1.5 * $scale-factor;
  }
}

// Flex Layout Responsive Mixin
@mixin responsive-flex-layout($mobile-direction: column, $desktop-direction: row) {
  display: flex;
  justify-content: center;
  align-items: center;
  
  @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, md-max)) {
    flex-direction: $mobile-direction;
    @include responsive-spacing(gap, 0.75rem, 0.8);
  }
  
  @include respond-to(map-get($breakpoints, lg)) {
    flex-direction: $desktop-direction;
    justify-content: space-between;
    @include responsive-spacing(gap, 1rem);
  }
}

// Table Cell Responsive Padding Mixin
@mixin table-cell-padding($base-vertical: 1rem, $base-horizontal: 2rem) {
  padding: $base-vertical $base-horizontal;
  
  @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
    padding: $base-vertical * 0.5 $base-horizontal * 0.125; // Manteniendo exacto para 320px
  }
  
  @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, sm-max)) {
    padding: $base-vertical * 0.6 $base-horizontal * 0.4;
  }
  
  @include respond-to(map-get($breakpoints, md), map-get($breakpoints, md-max)) {
    padding: $base-vertical * 0.75 $base-horizontal * 0.75;
  }
  
  @include respond-to(map-get($breakpoints, lg), map-get($breakpoints, lg-max)) {
    padding: $base-vertical * 0.8 $base-horizontal * 0.75;
  }
  
  @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
    padding: $base-vertical * 1.1 $base-horizontal * 1.25;
  }
  
  @include respond-to(map-get($breakpoints, xxxl)) {
    padding: $base-vertical * 1.25 $base-horizontal * 1.5;
  }
}

// Button Responsive Styles Mixin
@mixin responsive-button($base-height: 2rem, $base-padding: 0.375rem 1rem) {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  background-color: white;
  border: 2px solid $border-color;
  border-radius: 0.375rem;
  font-weight: 600;
  transition: all 0.2s ease;
  color: #6c757d;
  white-space: nowrap;
  
  height: $base-height;
  padding: $base-padding;
  @include responsive-spacing(gap, 0.375rem);
  @include responsive-typography(0.75rem);
  
  @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
    height: 1.375rem;
    padding: 0.1875rem 0.375rem;
    font-size: 0.5625rem;
    font-weight: 500;
    border-radius: 0.1875rem;
    border-width: 1px;
    min-width: 2.25rem; // Aumentado para mejor área de hover
    max-width: 2.5rem;
    gap: 0.125rem;
    
    span {
      display: none;
    }
  }

  // Desde 500px ya se muestra el texto
  @include respond-to(500px, map-get($breakpoints, sm-max)) {
    height: 1.875rem;
    padding: 0.3rem 0.75rem;
    font-size: 0.75rem;
    border-radius: 0.3rem;
    border-width: 1.5px;
    min-width: 4rem;
    max-width: 5rem;
    gap: 0.3rem;

    span {
      display: inline; // Se muestra el texto desde 500px
    }
  }
  
  @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, sm-max)) {
    height: 2.125rem;
    padding: 0.4375rem 0.9375rem;
    font-size: 0.8125rem;
    border-radius: 0.4375rem;
    border-width: 1.5px;
    min-width: 4.75rem;
    max-width: 5.25rem;
    gap: 0.4375rem;
  }
  
  @include respond-to(map-get($breakpoints, md), map-get($breakpoints, lg-max)) {
    height: 1.75rem;
    padding: 0.3125rem 0.625rem;
    font-size: 0.6875rem;
    border-radius: 0.3125rem;
    min-width: 3.5rem;
    max-width: 3.75rem;
    gap: 0.25rem;
  }
  
  @include respond-to(map-get($breakpoints, xl), map-get($breakpoints, xl-max)) {
    height: 1.875rem;
    padding: 0.375rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 650;
    gap: 0.3125rem;
    min-width: 3.75rem;
    max-width: 4rem;
  }
  
  @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
    height: 2.25rem;
    padding: 0.625rem 1.125rem;
    font-size: 0.875rem;
    font-weight: 700;
    border-radius: 0.5rem;
    gap: 0.5rem;
    min-width: 5rem;
    max-width: 6rem;
  }
  
  @include respond-to(map-get($breakpoints, xxxl)) {
    height: 2.5rem;
    padding: 0.75rem 1.375rem;
    font-size: 1rem;
    font-weight: 700;
    border-radius: 0.625rem;
    gap: 0.625rem;
    min-width: 5.5rem;
    max-width: 6.5rem;
  }
}

// =============================================================================
// CONTENEDOR PRINCIPAL DE MACHINE TABLE
// =============================================================================
.machine-table-container {
  .machine-table-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    @include responsive-spacing(margin-bottom, 1.5rem);
    @include responsive-spacing(gap, 1rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, md-max)) {
      flex-direction: column;
      align-items: center;
    }
  }

  .machine-table-title {
    font-weight: bold;
    color: #111827;
    margin: 0;
    flex: 1;
    @include responsive-typography(1.5rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, md-max)) {
      text-align: center;
    }

    @include respond-to(map-get($breakpoints, lg)) {
      text-align: left;
    }
  }

  .machine-table-add-button {
    flex-shrink: 0;

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, md-max)) {
      width: 100%;
      display: flex;
      justify-content: center;
    }

    @include respond-to(map-get($breakpoints, lg)) {
      width: auto;
    }
  }

  .machine-table-content {
    width: 100%;
  }
}

// =============================================================================
// CONTENEDOR PRINCIPAL DE LA TABLA CON FIXES INTEGRADOS
// =============================================================================
.dynamic-table-container {
  h2 {
    @include responsive-typography(1.25rem);
    @include responsive-spacing(margin, 1rem);
    
    // FIX ESPECÍFICO PARA ÓRDENES: Rango problemático 320px-396px
    @include respond-to(320px, 396px) {
      margin: 0.2rem;
      font-size: 0.56rem;
    }
    
    @include respond-to(397px, 470px) {
      margin: 0.3rem;
      font-size: 0.69rem;
    }
  }

  .element-counter {
    @include responsive-typography(0.875rem);
    font-weight: 600;

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      font-weight: 500;
    }

    @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, md-max)) {
      font-weight: 550;
    }

    @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
      font-weight: 650;
    }

    @include respond-to(map-get($breakpoints, xxxl)) {
      font-weight: 700;
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      font-size: 0.39rem;
      padding: 0.15rem 0.4rem;
    }
    
    @include respond-to(397px, 470px) {
      font-size: 0.48rem;
      padding: 0.2rem 0.5rem;
    }
  }

  .search-container {
    position: relative;
    width: 100%;
    @include responsive-spacing(margin, 1rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      margin: 0 0.25rem; // Manteniendo exacto para 320px
    }
  }

  .search-icon-container {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    display: flex;
    align-items: center;
    pointer-events: none;
    z-index: 10;
    @include responsive-spacing(left, 1rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      left: 0.5rem; // Manteniendo exacto para 320px
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      left: 0.25rem;
    }
    
    @include respond-to(397px, 470px) {
      left: 0.4rem;
    }
  }

  .search-icon {
    color: #6b7280;
    @include responsive-typography(1.25rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      width: 1rem;
      height: 1rem;
    }

    @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, sm-max)) {
      width: 1.0625rem;
      height: 1.0625rem;
    }

    @include respond-to(map-get($breakpoints, md), map-get($breakpoints, md-max)) {
      width: 1.125rem;
      height: 1.125rem;
    }

    @include respond-to(map-get($breakpoints, lg), map-get($breakpoints, lg-max)) {
      width: 1.25rem;
      height: 1.25rem;
    }

    @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
      width: 1.375rem;
      height: 1.375rem;
    }

    @include respond-to(map-get($breakpoints, xxxl)) {
      width: 1.5rem;
      height: 1.5rem;
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      width: 0.6rem;
      height: 0.6rem;
    }
    
    @include respond-to(397px, 470px) {
      width: 0.8rem;
      height: 0.8rem;
    }
  }

  .search-input {
    width: 100%;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    background-color: white;
    @include responsive-typography(1rem);

    // Padding específicos para cada breakpoint (manteniendo lógica original)
    padding: 0.625rem 1rem 0.625rem 3rem;

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      padding: 0.5rem 0.5rem 0.5rem 2.25rem;
    }

    @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, sm-max)) {
      padding: 0.5625rem 0.8125rem 0.5625rem 2.75rem;
    }

    @include respond-to(map-get($breakpoints, md), map-get($breakpoints, md-max)) {
      padding: 0.5625rem 0.875rem 0.5625rem 2.75rem;
    }

    @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
      padding: 0.75rem 1.25rem 0.75rem 3.25rem;
    }

    @include respond-to(map-get($breakpoints, xxxl)) {
      padding: 0.875rem 1.5rem 0.875rem 3.5rem;
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      padding: 0.25rem 0.3rem 0.25rem 1.2rem;
      border-radius: 0.25rem;
      font-size: 0.45rem;
    }
    
    @include respond-to(397px, 470px) {
      padding: 0.4rem 0.4rem 0.4rem 1.6rem;
      border-radius: 0.3rem;
      font-size: 0.55rem;
    }

    &::placeholder {
      color: #6b7280;
      font-size: inherit;
    }

    &:focus {
      outline: none;
      box-shadow: 0 0 0 2px #3b82f6;
      border-color: transparent;
    }
  }

  // First child specific padding
  th:first-child,
  td:first-child {
    @include responsive-spacing(padding-left, 2rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      padding-left: 0.5rem; // Manteniendo exacto para 320px
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      padding-left: 0.2rem;
    }
    
    @include respond-to(397px, 470px) {
      padding-left: 0.3rem;
    }
  }

  // Table headers
  thead th {
    @include table-cell-padding(0.75rem, 2rem);
    @include responsive-typography(0.75rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      font-size: 0.5rem; // Manteniendo exacto para 320px
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      font-size: 0.35rem;
      padding: 0.19rem 0.16rem;
    }
    
    @include respond-to(397px, 470px) {
      font-size: 0.45rem;
      padding: 0.3rem 0.2rem;
    }
  }

  // Table body cells
  tbody td {
    @include table-cell-padding(1rem, 2rem);
    @include responsive-typography(1rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      font-size: 0.8125rem; // Manteniendo exacto para 320px
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      font-size: 0.6rem;
      padding: 0.25rem 0.16rem;
    }
    
    @include respond-to(397px, 470px) {
      font-size: 0.7rem;
      padding: 0.4rem 0.2rem;
    }
  }

  // Hover gris en las filas de la tabla
  tbody tr {
    transition: background-color 0.2s ease;
    
    &:hover {
      background-color: #f9fafb;
    }

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, md-max)) {
      &:hover {
        background-color: #f3f4f6; // Hover más sutil en móviles
      }
    }
  }

  // Select elements con mejor escalado de fuente
  table tbody tr td select,
  tbody td select {
    font-size: 0.525rem;
    padding: 0.25rem 1.5rem 0.25rem 0.5rem;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23EA6300' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.375rem center;
    background-repeat: no-repeat;
    background-size: 1em 1em;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    min-height: 1.375rem;
    max-width: 4.5rem;

    @include respond-to(571px, 676px) {
      font-size: 0.65rem; // Aumentado para mejor legibilidad
      padding: 0.4rem 2rem 0.4rem 0.7rem; // Ajustado padding
      background-size: 1em 1em;
      background-position: right 0.5rem center;
      min-height: 1.375rem;
      max-width: 5.5rem;
      font-weight: 600;
    }

    @include respond-to(677px, map-get($breakpoints, md-max)) {
      font-size: 0.7rem; // Aumentado para mejor legibilidad
      padding: 0.3rem 1rem 0.3rem 0.4rem;
      background-size: 0.9em 0.9em;
      background-position: right 0.3rem center;
      min-height: 1.375rem;
      max-width: 6.5rem;
    }

    @include respond-to(map-get($breakpoints, lg), map-get($breakpoints, lg-max)) {
      font-size: 0.65rem; // Reducido de 0.875rem para mejor proporción
      padding: 0.3rem 1rem 0.3rem 0.4rem;
      background-size: 0.9em 0.9em;
      background-position: right 0.3rem center;
      min-height: 1.8rem;
      max-width: 7.5rem;
    }

    @include respond-to(map-get($breakpoints, xl), map-get($breakpoints, xl-max)) {
      font-size: 0.7rem; // Reducido de 0.9375rem para mejor proporción
      padding: 0.4rem 1.5rem 0.4rem 0.7rem;
      background-size: 1em 1em;
      background-position: right 0.4rem center;
      min-height: 2rem;
      max-width: 8.5rem;
    }

    @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
      font-size: 0.75rem; // Reducido de 1.0125rem para mejor proporción
      padding: 0.45rem 1.7rem 0.45rem 0.8rem;
      background-size: 1.1em 1.1em;
      background-position: right 0.5rem center;
      min-height: 2.125rem;
      max-width: 9.5rem;
    }

    @include respond-to(map-get($breakpoints, xxxl)) {
      font-size: 0.85rem; // Reducido de 1.0625rem para mejor proporción
      padding: 0.5rem 2rem 0.5rem 0.9rem;
      background-size: 1.2em 1.2em;
      background-position: right 0.6rem center;
      min-height: 2.125rem;
      max-width: 11.5rem;
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      font-size: 0.35rem;
      padding: 0.1rem 0.8rem 0.1rem 0.2rem;
      background-size: 0.5em 0.5em;
      background-position: right 0.15rem center;
      min-height: 0.8rem;
      max-width: 2.5rem;
    }
    
    @include respond-to(397px, 470px) {
      font-size: 0.45rem;
      padding: 0.15rem 1rem 0.15rem 0.3rem;
      background-size: 0.6em 0.6em;
      background-position: right 0.2rem center;
      min-height: 1rem;
      max-width: 3rem;
    }
  }

  select option,
  tbody td select option,
  table tbody tr td select option {
    background-color: white;
    background: white;
    color: #374151;
    font-size: inherit;
    border: none;
    @include table-cell-padding(0.5rem, 0.75rem);
  }

  .button-container {
    @include responsive-flex-layout(column, row);
    flex-wrap: nowrap;

    @include respond-to(530px, map-get($breakpoints, sm-max)) {
      gap: 0.1875rem;
      padding: 0;
      justify-content: center;
      flex-direction: row;
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      gap: 0.05rem;
      padding: 0;
      justify-content: center;
      flex-direction: column;
    }
    
    @include respond-to(397px, 470px) {
      gap: 0.1rem;
      padding: 0;
      justify-content: center;
      flex-direction: column;
    }
  }

  tbody td:last-child {
    div {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
      flex-wrap: nowrap;
      @include responsive-spacing(gap, 0.5rem);

      @include respond-to(530px, map-get($breakpoints, sm-max)) {
        gap: 0.5rem;
        justify-content: center;
      }

      @include respond-to(map-get($breakpoints, lg), map-get($breakpoints, lg-max)) {
        gap: 0.375rem;
      }

      @include respond-to(map-get($breakpoints, xxl)) {
        gap: 0.75rem;
        justify-content: center;
        flex-wrap: nowrap;
      }
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      padding: 0.15rem 0.2rem;
    }
    
    @include respond-to(397px, 470px) {
      padding: 0.25rem 0.3rem;
    }
  }

  @include respond-to(map-get($breakpoints, xs), 529px) {
    tbody td:last-child {
      div {
        display: flex !important;
        flex-direction: column !important;
        gap: 0.5rem !important;
        justify-content: center !important;
        align-items: center !important;
        flex-wrap: nowrap !important;
      }
    }
  }

  // Mobile table layout (manteniendo estructura crítica para 320px-470px)
  @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
    th, td {
      padding-left: 0.5rem;
      padding-right: 0.25rem;
    }

    .overflow-x-auto {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }

    table {
      min-width: 100%;
      width: auto;
      table-layout: fixed;
    }

    th:nth-child(1), td:nth-child(1) { width: 16%; }
    th:nth-child(2), td:nth-child(2) { width: 10%; }
    th:nth-child(3), td:nth-child(3) { width: 14%; }
    th:nth-child(4), td:nth-child(4) { width: 60%; }
  }
  
  // FIX ESPECÍFICO PARA ÓRDENES: Distribución de columnas optimizada
  @include respond-to(320px, 396px) {
    th, td {
      padding-left: 0.2rem;
      padding-right: 0.1rem;
    }

    th:nth-child(1), td:nth-child(1) { width: 12%; }
    th:nth-child(2), td:nth-child(2) { width: 12%; }
    th:nth-child(3), td:nth-child(3) { width: 16%; }
    th:nth-child(4), td:nth-child(4) { width: 14%; }
    th:nth-child(5), td:nth-child(5) { width: 14%; }
    th:nth-child(6), td:nth-child(6) { width: 32%; }
  }
  
  @include respond-to(397px, 470px) {
    th:nth-child(1), td:nth-child(1) { width: 14%; }
    th:nth-child(2), td:nth-child(2) { width: 12%; }
    th:nth-child(3), td:nth-child(3) { width: 16%; }
    th:nth-child(4), td:nth-child(4) { width: 14%; }
    th:nth-child(5), td:nth-child(5) { width: 14%; }
    th:nth-child(6), td:nth-child(6) { width: 30%; }
  }

  @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, sm-max)) {
    th, td {
      padding-left: 0.875rem;
      padding-right: 0.5rem;
    }

    .overflow-x-auto {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }

    table {
      min-width: 100%;
      width: auto;
      table-layout: fixed;
    }

    th:nth-child(1), td:nth-child(1) { width: 28%; }
    th:nth-child(2), td:nth-child(2) { width: 20%; }
    th:nth-child(3), td:nth-child(3) { width: 36%; }
    th:nth-child(4), td:nth-child(4) { width: 16%; }
  }

  @include respond-to(map-get($breakpoints, md), map-get($breakpoints, lg-max)) {
    th, td {
      padding-left: 0.75rem;
      padding-right: 0.5rem;
    }

    table {
      table-layout: auto;
    }
  }
}

// Utility classes with responsive behavior
.dynamic-table-container .px-8.py-4,
.dynamic-table-container .px-8 {
  @include table-cell-padding(1rem, 2rem);

  .flex {
    flex-wrap: wrap;
    justify-content: center;
    @include responsive-spacing(gap, 0.75rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, md-max)) {
      flex-direction: column;
      align-items: center;
    }

    @include respond-to(map-get($breakpoints, lg), 854px) {
      flex-direction: row;
      justify-content: space-between;
    }

    @include respond-to(855px) {
      flex-direction: row;
      justify-content: space-between;
    }
  }
}

// Action button component con fixes integrados
.table-action-button {
  @include responsive-button();

  svg {
    color: $primary-color;
    transition: all 0.2s ease;
    flex-shrink: 0;
    @include responsive-typography(0.75rem);

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      width: 0.5rem;
      height: 0.5rem;
    }

    @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, sm-max)) {
      width: 0.8rem;
      height: 0.8rem;
    }

    @include respond-to(500px, map-get($breakpoints, sm-max)) {
      width: 0.75rem;
      height: 0.75rem;
    }

    @include respond-to(map-get($breakpoints, md), map-get($breakpoints, lg-max)) {
      width: 0.625rem;
      height: 0.625rem;
    }

    @include respond-to(map-get($breakpoints, xl), map-get($breakpoints, xl-max)) {
      width: 0.7rem;
      height: 0.7rem;
    }

    @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
      width: 0.875rem;
      height: 0.875rem;
    }

    @include respond-to(map-get($breakpoints, xxxl)) {
      width: 1rem;
      height: 1rem;
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      width: 0.3rem;
      height: 0.3rem;
    }
    
    @include respond-to(397px, 470px) {
      width: 0.4rem;
      height: 0.4rem;
    }
  }

  // Hover principal para todos los tamaños
  &:hover {
    svg {
      animation: bounce 0.6s ease-in-out;
    }
    
    // Scale adicional solo para pantallas pequeñas
    @include respond-to(map-get($breakpoints, xs), 499px) {
      svg {
        animation: bounce 0.6s ease-in-out;
        transform: scale(1.1);
      }
    }
  }
  
  // FIX ESPECÍFICO PARA ÓRDENES: Botones ultra compactos
  @include respond-to(320px, 396px) {
    height: 1rem;
    padding: 0.1rem 0.15rem;
    font-size: 0.4rem;
    border-radius: 0.125rem;
    border-width: 1px;
    min-width: 1.2rem;
    max-width: 1.2rem;
    gap: 0.05rem;
    
    span {
      display: none;
    }
  }

  @include respond-to(397px, 470px) {
    height: 1.2rem;
    padding: 0.15rem 0.25rem;
    font-size: 0.5rem;
    border-radius: 0.15rem;
    border-width: 1px;
    min-width: 1.5rem;
    max-width: 1.5rem;
    gap: 0.08rem;
    
    span {
      display: none;
    }
  }

  // Estilo para botones con solo ícono (nuevo)
  &--icon-only {
    .text-secondary {
      &:not(.sr-only) {
        display: none !important;
      }
    }
    
    // Hacer el botón más compacto cuando es solo ícono
    min-width: auto;
    padding: 0.5rem 0.75rem;

    @include respond-to(map-get($breakpoints, xs), map-get($breakpoints, xs-max)) {
      padding: 0.1875rem 0.25rem;
      min-width: 1.75rem;
      max-width: 1.75rem;
    }

    @include respond-to(500px, map-get($breakpoints, sm-max)) {
      padding: 0.3rem 0.5rem;
      min-width: 2rem;
      max-width: 2rem;
    }

    @include respond-to(map-get($breakpoints, sm), map-get($breakpoints, sm-max)) {
      padding: 0.4375rem 0.5625rem;
      min-width: 2.125rem;
      max-width: 2.125rem;
    }

    @include respond-to(map-get($breakpoints, md), map-get($breakpoints, lg-max)) {
      padding: 0.3125rem 0.4375rem;
      min-width: 1.75rem;
      max-width: 1.75rem;
    }

    @include respond-to(map-get($breakpoints, xl), map-get($breakpoints, xl-max)) {
      padding: 0.375rem 0.5rem;
      min-width: 1.875rem;
      max-width: 1.875rem;
    }

    @include respond-to(map-get($breakpoints, xxl), map-get($breakpoints, xxl-max)) {
      padding: 0.625rem 0.75rem;
      min-width: 2.25rem;
      max-width: 2.25rem;
    }

    @include respond-to(map-get($breakpoints, xxxl)) {
      padding: 0.75rem 0.875rem;
      min-width: 2.5rem;
      max-width: 2.5rem;
    }
    
    // FIX ESPECÍFICO PARA ÓRDENES
    @include respond-to(320px, 396px) {
      padding: 0.05rem 0.1rem;
      min-width: 0.8rem;
      max-width: 0.8rem;
    }
    
    @include respond-to(397px, 470px) {
      padding: 0.1rem 0.15rem;
      min-width: 1rem;
      max-width: 1rem;
    }
  }
}

// Clase de utilidad para accesibilidad (ocultar texto visualmente pero mantenerlo para lectores de pantalla)
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Animations (manteniendo intacta)
@keyframes bounce {
  0%, 20%, 53%, 80%, 100% {
    transform: translate3d(0, 0, 0);
  }
  40%, 43% {
    transform: translate3d(0, -8px, 0);
  }
  70% {
    transform: translate3d(0, -4px, 0);
  }
  90% {
    transform: translate3d(0, -2px, 0);
  }
}

// Al final de DynamicTable.scss - Fix solo para scroll horizontal en órdenes

.dynamic-table-container {
  // Comportamiento normal para pantallas grandes (maquinaria - 4 columnas)
  @include respond-to(map-get($breakpoints, lg)) {
    .overflow-x-auto {
      overflow-x: visible;
    }

    table {
      table-layout: auto !important;
      width: 100% !important;
      
      th, td {
        width: auto !important;
      }
    }
  }
  
  &.orders-table {
    @include respond-to(map-get($breakpoints, lg)) {
      table {
        table-layout: fixed !important;
        
        th:nth-child(1), td:nth-child(1) { width: 13% !important; }
        th:nth-child(2), td:nth-child(2) { width: 15% !important; }
        th:nth-child(3), td:nth-child(3) { width: 20% !important; }
        th:nth-child(4), td:nth-child(4) { width: 17% !important; }
        th:nth-child(5), td:nth-child(5) { width: 17% !important; }
        th:nth-child(6), td:nth-child(6) { width: 18% !important; }
        
        th, td {
          overflow: hidden;
          text-overflow: ellipsis;
          word-wrap: break-word;
      
          padding-left: 1rem !important;
          padding-right: 0.75rem !important;
        }
        
        th:first-child, td:first-child {
          padding-left: 1.5rem !important;
        }
        
        th:last-child, td:last-child {
          padding-right: 1.5rem !important;
        }
      }
    }
  }
}